// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Mock render - default - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "default_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.allowClear: false - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": false,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [
        <mockConstructor
          className="{}"
          id="properties.allowClear: false_0"
          value="0"
        >
          <HtmlComponent
            html="Option 1"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{}"
          id="properties.allowClear: false_1"
          value="1"
        >
          <HtmlComponent
            html="Option 2"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
      ],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.allowClear: false_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.autoFocus: true - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": true,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [
        <mockConstructor
          className="{}"
          id="properties.autoFocus: true_0"
          value="0"
        >
          <HtmlComponent
            html="Option 1"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{}"
          id="properties.autoFocus: true_1"
          value="1"
        >
          <HtmlComponent
            html="Option 2"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
      ],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.autoFocus: true_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.backfill: true - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": true,
      "bordered": undefined,
      "children": Array [
        <mockConstructor
          className="{}"
          id="properties.backfill: true_0"
          value="0"
        >
          <HtmlComponent
            html="Option 1"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{}"
          id="properties.backfill: true_1"
          value="1"
        >
          <HtmlComponent
            html="Option 2"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
      ],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.backfill: true_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.bordered: false - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": false,
      "children": Array [],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.bordered: false_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.defaultOpen: true - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [
        <mockConstructor
          className="{}"
          id="properties.defaultOpen: true_0"
          value="0"
        >
          <HtmlComponent
            html="Option 1"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{}"
          id="properties.defaultOpen: true_1"
          value="1"
        >
          <HtmlComponent
            html="Option 2"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
      ],
      "className": "{}",
      "defaultOpen": true,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.defaultOpen: true_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.disabled: true - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": true,
      "filterOption": [Function],
      "id": "properties.disabled: true_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.inputStyle: CSS style applied - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [
        <mockConstructor
          className="{}"
          id="properties.inputStyle: CSS style applied_0"
          value="0"
        >
          <HtmlComponent
            html="Option 1"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "border": "1px solid red",
                      },
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":{\\"border\\":\\"1px solid red\\"}}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{}"
          id="properties.inputStyle: CSS style applied_1"
          value="1"
        >
          <HtmlComponent
            html="Option 2"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "border": "1px solid red",
                      },
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":{\\"border\\":\\"1px solid red\\"}}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
      ],
      "className": "{\\"style\\":{\\"border\\":\\"1px solid red\\"}}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.inputStyle: CSS style applied_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.label.align_right - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.label.align_right_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.label.colon_false - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.label.colon_false_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.label.disabled_true - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.label.disabled_true_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.label.extra_showingextra - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.label.extra_showingextra_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.label.inline_true - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.label.inline_true_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.label.span_12 - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.label.span_12_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.options.label: html - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [
        <mockConstructor
          className="{\\"style\\":[null,null]}"
          id="properties.options.label: html_0"
          value="0"
        >
          <HtmlComponent
            html=<div>
  Some main text
</div>
<div style="font-size: 6px;">
  Some small subtext
</div>
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{\\"style\\":[null,null]}"
          id="properties.options.label: html_1"
          value="1"
        >
          <HtmlComponent
            html=<div style="color: green;">
  Option green
</div>
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{\\"style\\":[null,null]}"
          id="properties.options.label: html_2"
          value="2"
        >
          <HtmlComponent
            html="Option 3"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
      ],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.options.label: html_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.options.label: html and properties.options.filterString - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [
        <mockConstructor
          className="{\\"style\\":[null,null]}"
          filterstring="Some main text"
          id="properties.options.label: html and properties.options.filterString_0"
          value="0"
        >
          <HtmlComponent
            html=<div>
  Some main text
</div>
<div style="font-size: 6px;">
  Some small subtext
</div>
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{\\"style\\":[null,null]}"
          filterstring="Option green"
          id="properties.options.label: html and properties.options.filterString_1"
          value="1"
        >
          <HtmlComponent
            html=<div style="color: green;">
  Option green
</div>
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{\\"style\\":[null,null]}"
          id="properties.options.label: html and properties.options.filterString_2"
          value="2"
        >
          <HtmlComponent
            html="Option 3"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
      ],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.options.label: html and properties.options.filterString_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.options: html - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [
        <mockConstructor
          className="{}"
          id="properties.options: html_0"
          value="0"
        >
          <HtmlComponent
            html=<div>
  Some main text
</div>
<div style="font-size: 6px;">
  Some small subtext
</div>
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{}"
          id="properties.options: html_1"
          value="1"
        >
          <HtmlComponent
            html=<div style="color: green;">
  Option green
</div>
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{}"
          id="properties.options: html_2"
          value="2"
        >
          <HtmlComponent
            html="Option 3"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
      ],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.options: html_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.options-object - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [
        <mockConstructor
          className="{\\"style\\":[null,null]}"
          id="properties.options-object_0"
          value="0"
        >
          <HtmlComponent
            html="one"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{\\"style\\":[null,null]}"
          id="properties.options-object_1"
          value="1"
        >
          <HtmlComponent
            html="two"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
      ],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.options-object_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.options-string - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [
        <mockConstructor
          className="{}"
          id="properties.options-string_0"
          value="0"
        >
          <HtmlComponent
            html="Option 1"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{}"
          id="properties.options-string_1"
          value="1"
        >
          <HtmlComponent
            html="Option 2"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
      ],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.options-string_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.options-style - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [
        <mockConstructor
          className="{\\"style\\":[null,{\\"color\\":\\"red\\"}]}"
          id="properties.options-style_0"
          value="0"
        >
          <HtmlComponent
            html="one"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      Array [
                        undefined,
                        Object {
                          "color": "red",
                        },
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,{\\"color\\":\\"red\\"}]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{\\"style\\":[null,null]}"
          id="properties.options-style_1"
          value="1"
        >
          <HtmlComponent
            html="two"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      Array [
                        undefined,
                        Object {
                          "color": "red",
                        },
                      ],
                    ],
                    Array [
                      Array [
                        undefined,
                        undefined,
                      ],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,{\\"color\\":\\"red\\"}]}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":[null,null]}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
      ],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.options-style_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.optionsStyle: CSS style applied - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [
        <mockConstructor
          className="{\\"style\\":{\\"color\\":\\"blue\\"}}"
          id="properties.optionsStyle: CSS style applied_0"
          value="0"
        >
          <HtmlComponent
            html="Option 1"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      Object {
                        "color": "blue",
                      },
                    ],
                    Array [
                      Object {
                        "color": "blue",
                      },
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":{\\"color\\":\\"blue\\"}}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":{\\"color\\":\\"blue\\"}}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{\\"style\\":{\\"color\\":\\"blue\\"}}"
          id="properties.optionsStyle: CSS style applied_1"
          value="1"
        >
          <HtmlComponent
            html="Option 2"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      Object {
                        "color": "blue",
                      },
                    ],
                    Array [
                      Object {
                        "color": "blue",
                      },
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":{\\"color\\":\\"blue\\"}}",
                    },
                    Object {
                      "type": "return",
                      "value": "{\\"style\\":{\\"color\\":\\"blue\\"}}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
      ],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.optionsStyle: CSS style applied_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.placeholder_Text_inside_block - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.placeholder_Text_inside_block_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Text inside block",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.size: large - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [
        <mockConstructor
          className="{}"
          id="properties.size: large_0"
          value="0"
        >
          <HtmlComponent
            html="Option 1"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{}"
          id="properties.size: large_1"
          value="1"
        >
          <HtmlComponent
            html="Option 2"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
      ],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.size: large_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": "large",
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.size: small - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [
        <mockConstructor
          className="{}"
          id="properties.size: small_0"
          value="0"
        >
          <HtmlComponent
            html="Option 1"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
        <mockConstructor
          className="{}"
          id="properties.size: small_1"
          value="1"
        >
          <HtmlComponent
            html="Option 2"
            methods={
              Object {
                "makeCssClass": [MockFunction] {
                  "calls": Array [
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                    Array [
                      undefined,
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                    Object {
                      "type": "return",
                      "value": "{}",
                    },
                  ],
                },
                "registerEvent": [Function],
                "registerMethod": [Function],
                "setValue": [Function],
                "triggerEvent": [Function],
              }
            }
          />
        </mockConstructor>,
      ],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.size: small_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": "small",
      "value": undefined,
    },
    Object {},
  ],
]
`;

exports[`Mock render - properties.title - value[0] - AutoComplete 1`] = `
Array [
  Array [
    Object {
      "allowClear": true,
      "autoFocus": undefined,
      "backfill": undefined,
      "bordered": undefined,
      "children": Array [],
      "className": "{}",
      "defaultOpen": undefined,
      "disabled": undefined,
      "filterOption": [Function],
      "id": "properties.title_input",
      "onChange": [Function],
      "onSearch": [Function],
      "placeholder": "Type or select item",
      "size": undefined,
      "value": undefined,
    },
    Object {},
  ],
]
`;
