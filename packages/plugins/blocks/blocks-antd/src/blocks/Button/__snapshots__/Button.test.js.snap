// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render default - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary emotion-0"
  id="default"
  type="button"
>
  <span
    class="emotion-1"
  >
    default
  </span>
</button>
`;

exports[`Render properties.block: true - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-block emotion-0"
  id="properties.block: true"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.block: true
  </span>
</button>
`;

exports[`Render properties.color: #9c27b0 - value[0] 1`] = `
.emotion-0 {
  background-color: #9c27b0;
  border-color: #9c27b0;
}

.emotion-0:active {
  background-color: #75178a;
  border-color: #75178a;
}

.emotion-0:hover {
  background-color: #af48bd;
  border-color: #af48bd;
}

<button
  class="ant-btn ant-btn-primary emotion-0"
  id="properties.color: #9c27b0"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.color: #9c27b0
  </span>
</button>
`;

exports[`Render properties.danger: true - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-dangerous emotion-0"
  id="properties.danger: true"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.danger: true
  </span>
</button>
`;

exports[`Render properties.disabled: true - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary emotion-0"
  disabled=""
  id="properties.disabled: true"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.disabled: true
  </span>
</button>
`;

exports[`Render properties.ghost: true - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-background-ghost emotion-0"
  id="properties.ghost: true"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.ghost: true
  </span>
</button>
`;

exports[`Render properties.hideTitle: true - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-icon-only emotion-0"
  id="properties.hideTitle: true"
  type="button"
>
  <span
    class="anticon"
    role="img"
  >
    <svg
      data-testid="AiOutlineExclamationCircle"
    >
      {"id":"properties.hideTitle: true_icon","title":"AiOutlineDelete","className":"css-0","required":false}
    </svg>
  </span>
</button>
`;

exports[`Render properties.href: www.lowdefy.com - value[0] 1`] = `
<a
  class="ant-btn ant-btn-primary emotion-0"
  href="https://www.lowdefy.com"
  id="properties.href: www.lowdefy.com"
>
  <span
    class="emotion-1"
  >
    properties.href: www.lowdefy.com
  </span>
</a>
`;

exports[`Render properties.icon object - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary emotion-0"
  id="properties.icon object"
  type="button"
>
  <span
    class="anticon"
    role="img"
  >
    <svg
      data-testid="AiOutlineExclamationCircle"
    >
      {"id":"properties.icon object_icon","title":"AiOutlineSave","className":"emotion-1","color":"red","required":false}
    </svg>
  </span>
  <span
    class="emotion-1"
  >
    properties.icon object
  </span>
</button>
`;

exports[`Render properties.icon string - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary emotion-0"
  id="properties.icon string"
  type="button"
>
  <span
    class="anticon"
    role="img"
  >
    <svg
      data-testid="AiOutlineExclamationCircle"
    >
      {"id":"properties.icon string_icon","title":"AiOutlineSave","className":"emotion-1","required":false}
    </svg>
  </span>
  <span
    class="emotion-1"
  >
    properties.icon string
  </span>
</button>
`;

exports[`Render properties.shape: circle - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-circle emotion-0"
  id="properties.shape: circle"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.shape: circle
  </span>
</button>
`;

exports[`Render properties.shape: round - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-round emotion-0"
  id="properties.shape: round"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.shape: round
  </span>
</button>
`;

exports[`Render properties.size: large - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-lg emotion-0"
  id="properties.size: large"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.size: large
  </span>
</button>
`;

exports[`Render properties.size: small - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-sm emotion-0"
  id="properties.size: small"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.size: small
  </span>
</button>
`;

exports[`Render properties.title - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary emotion-0"
  id="properties.title"
  type="button"
>
  <span
    class="emotion-1"
  >
    Button title
  </span>
</button>
`;

exports[`Render properties.type: danger - value[0] 1`] = `
<button
  class="ant-btn ant-btn-danger emotion-0"
  id="properties.type: danger"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.type: danger
  </span>
</button>
`;

exports[`Render properties.type: dashed - value[0] 1`] = `
<button
  class="ant-btn ant-btn-dashed emotion-0"
  id="properties.type: dashed"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.type: dashed
  </span>
</button>
`;

exports[`Render properties.type: default - value[0] 1`] = `
<button
  class="ant-btn emotion-0"
  id="properties.type: default"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.type: default
  </span>
</button>
`;

exports[`Render properties.type: link - value[0] 1`] = `
<button
  class="ant-btn ant-btn-link emotion-0"
  id="properties.type: link"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.type: link
  </span>
</button>
`;

exports[`Render properties.type: text - value[0] 1`] = `
<button
  class="ant-btn ant-btn-text emotion-0"
  id="properties.type: text"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.type: text
  </span>
</button>
`;

exports[`Render required = true default - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary emotion-0"
  id="default"
  type="button"
>
  <span
    class="emotion-1"
  >
    default
  </span>
</button>
`;

exports[`Render required = true properties.block: true - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-block emotion-0"
  id="properties.block: true"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.block: true
  </span>
</button>
`;

exports[`Render required = true properties.color: #9c27b0 - value[0] 1`] = `
.emotion-0 {
  background-color: #9c27b0;
  border-color: #9c27b0;
}

.emotion-0:active {
  background-color: #75178a;
  border-color: #75178a;
}

.emotion-0:hover {
  background-color: #af48bd;
  border-color: #af48bd;
}

<button
  class="ant-btn ant-btn-primary emotion-0"
  id="properties.color: #9c27b0"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.color: #9c27b0
  </span>
</button>
`;

exports[`Render required = true properties.danger: true - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-dangerous emotion-0"
  id="properties.danger: true"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.danger: true
  </span>
</button>
`;

exports[`Render required = true properties.disabled: true - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary emotion-0"
  disabled=""
  id="properties.disabled: true"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.disabled: true
  </span>
</button>
`;

exports[`Render required = true properties.ghost: true - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-background-ghost emotion-0"
  id="properties.ghost: true"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.ghost: true
  </span>
</button>
`;

exports[`Render required = true properties.hideTitle: true - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-icon-only emotion-0"
  id="properties.hideTitle: true"
  type="button"
>
  <span
    class="anticon"
    role="img"
  >
    <svg
      data-testid="AiOutlineExclamationCircle"
    >
      {"id":"properties.hideTitle: true_icon","title":"AiOutlineDelete","className":"css-0","required":false}
    </svg>
  </span>
</button>
`;

exports[`Render required = true properties.href: www.lowdefy.com - value[0] 1`] = `
<a
  class="ant-btn ant-btn-primary emotion-0"
  href="https://www.lowdefy.com"
  id="properties.href: www.lowdefy.com"
>
  <span
    class="emotion-1"
  >
    properties.href: www.lowdefy.com
  </span>
</a>
`;

exports[`Render required = true properties.icon object - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary emotion-0"
  id="properties.icon object"
  type="button"
>
  <span
    class="anticon"
    role="img"
  >
    <svg
      data-testid="AiOutlineExclamationCircle"
    >
      {"id":"properties.icon object_icon","title":"AiOutlineSave","className":"emotion-1","color":"red","required":false}
    </svg>
  </span>
  <span
    class="emotion-1"
  >
    properties.icon object
  </span>
</button>
`;

exports[`Render required = true properties.icon string - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary emotion-0"
  id="properties.icon string"
  type="button"
>
  <span
    class="anticon"
    role="img"
  >
    <svg
      data-testid="AiOutlineExclamationCircle"
    >
      {"id":"properties.icon string_icon","title":"AiOutlineSave","className":"emotion-1","required":false}
    </svg>
  </span>
  <span
    class="emotion-1"
  >
    properties.icon string
  </span>
</button>
`;

exports[`Render required = true properties.shape: circle - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-circle emotion-0"
  id="properties.shape: circle"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.shape: circle
  </span>
</button>
`;

exports[`Render required = true properties.shape: round - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-round emotion-0"
  id="properties.shape: round"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.shape: round
  </span>
</button>
`;

exports[`Render required = true properties.size: large - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-lg emotion-0"
  id="properties.size: large"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.size: large
  </span>
</button>
`;

exports[`Render required = true properties.size: small - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary ant-btn-sm emotion-0"
  id="properties.size: small"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.size: small
  </span>
</button>
`;

exports[`Render required = true properties.title - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary emotion-0"
  id="properties.title"
  type="button"
>
  <span
    class="emotion-1"
  >
    Button title
  </span>
</button>
`;

exports[`Render required = true properties.type: danger - value[0] 1`] = `
<button
  class="ant-btn ant-btn-danger emotion-0"
  id="properties.type: danger"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.type: danger
  </span>
</button>
`;

exports[`Render required = true properties.type: dashed - value[0] 1`] = `
<button
  class="ant-btn ant-btn-dashed emotion-0"
  id="properties.type: dashed"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.type: dashed
  </span>
</button>
`;

exports[`Render required = true properties.type: default - value[0] 1`] = `
<button
  class="ant-btn emotion-0"
  id="properties.type: default"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.type: default
  </span>
</button>
`;

exports[`Render required = true properties.type: link - value[0] 1`] = `
<button
  class="ant-btn ant-btn-link emotion-0"
  id="properties.type: link"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.type: link
  </span>
</button>
`;

exports[`Render required = true properties.type: text - value[0] 1`] = `
<button
  class="ant-btn ant-btn-text emotion-0"
  id="properties.type: text"
  type="button"
>
  <span
    class="emotion-1"
  >
    properties.type: text
  </span>
</button>
`;

exports[`Render required = true with html in title - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary emotion-0"
  id="with html in title"
  type="button"
>
  <span
    class="emotion-1"
  >
    <div
      style="color: orange;"
    >
      Title
    </div>
  </span>
</button>
`;

exports[`Render required = true with html in title and icon - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary emotion-0"
  id="with html in title and icon"
  type="button"
>
  <span
    class="anticon"
    role="img"
  >
    <svg
      data-testid="AiOutlineExclamationCircle"
    >
      {"id":"with html in title and icon_icon","title":"AiOutlineSave","className":"emotion-1","required":false}
    </svg>
  </span>
  <span
    class="emotion-1"
  >
    <div
      style="color: red;"
    >
      Title
    </div>
  </span>
</button>
`;

exports[`Render with html in title - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary emotion-0"
  id="with html in title"
  type="button"
>
  <span
    class="emotion-1"
  >
    <div
      style="color: orange;"
    >
      Title
    </div>
  </span>
</button>
`;

exports[`Render with html in title and icon - value[0] 1`] = `
<button
  class="ant-btn ant-btn-primary emotion-0"
  id="with html in title and icon"
  type="button"
>
  <span
    class="anticon"
    role="img"
  >
    <svg
      data-testid="AiOutlineExclamationCircle"
    >
      {"id":"with html in title and icon_icon","title":"AiOutlineSave","className":"emotion-1","required":false}
    </svg>
  </span>
  <span
    class="emotion-1"
  >
    <div
      style="color: red;"
    >
      Title
    </div>
  </span>
</button>
`;

exports[`Test Schema default 1`] = `false`;

exports[`Test Schema default 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.block: true 1`] = `false`;

exports[`Test Schema properties.block: true 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.color: #9c27b0 1`] = `false`;

exports[`Test Schema properties.color: #9c27b0 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.danger: true 1`] = `false`;

exports[`Test Schema properties.danger: true 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.disabled: true 1`] = `false`;

exports[`Test Schema properties.disabled: true 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.ghost: true 1`] = `false`;

exports[`Test Schema properties.ghost: true 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.hideTitle: true 1`] = `false`;

exports[`Test Schema properties.hideTitle: true 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.href: www.lowdefy.com 1`] = `false`;

exports[`Test Schema properties.href: www.lowdefy.com 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.icon object 1`] = `false`;

exports[`Test Schema properties.icon object 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.icon string 1`] = `false`;

exports[`Test Schema properties.icon string 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.shape: circle 1`] = `false`;

exports[`Test Schema properties.shape: circle 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.shape: round 1`] = `false`;

exports[`Test Schema properties.shape: round 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.size: large 1`] = `false`;

exports[`Test Schema properties.size: large 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.size: small 1`] = `false`;

exports[`Test Schema properties.size: small 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.title 1`] = `false`;

exports[`Test Schema properties.title 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.type: danger 1`] = `false`;

exports[`Test Schema properties.type: danger 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.type: dashed 1`] = `false`;

exports[`Test Schema properties.type: dashed 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.type: default 1`] = `false`;

exports[`Test Schema properties.type: default 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.type: link 1`] = `false`;

exports[`Test Schema properties.type: link 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema properties.type: text 1`] = `false`;

exports[`Test Schema properties.type: text 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema with html in title 1`] = `false`;

exports[`Test Schema with html in title 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;

exports[`Test Schema with html in title and icon 1`] = `false`;

exports[`Test Schema with html in title and icon 2`] = `
Array [
  Object {
    "instancePath": "/type",
    "keyword": "enum",
    "message": "must be equal to one of the allowed values",
    "params": Object {
      "allowedValues": Array [
        "primary",
        "default",
        "dashed",
        "danger",
        "link",
        "text",
      ],
    },
    "schemaPath": "#/properties/type/enum",
  },
]
`;
