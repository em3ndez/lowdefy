# Copyright 2020-2024 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: Stripe
    pageTitle: Stripe
    section: Connections
    filePath: connections/Stripe.yaml
    content:
      - id: markdown
        type: MarkdownWithCode
        properties:
          content: |
            ## Connections

            Connection types:
              - Stripe

            ### Stripe

            [Stripe](https://stripe.com/) is a popular payment provider which allows you to accept payments, send payouts, and manage your business online.
            The `Stripe` connector uses the official [Node.js client from Stripe](https://github.com/stripe/stripe-node).
            In order to use the `Stripe` connection, you first need to create a [Stripe](https://stripe.com/) account and setup an API key.

            > Secrets like API keys should be stored using the [`_secret`](operators/secret.md) operator.

            #### Properties
            - `secretKey: string`: __Required__ - Stripe [secret key](https://stripe.com/docs/keys).
            - `apiVersion: string`: Stripe API version to use. Defaults to the account-wide version.
            - `timeout: number`: Timeout for requests to the Stripe API.
            - `maxNetworkRetries: number`: Maximum number of times failed requests are repeated before throwing an error.
            - `telemetry: boolean`: Whether to send telemetry data to Stripe (this is forwarded to the Stripe client library. Lowdefy does not receive any telemetry data from your Stripe connection.)

            #### Examples

            ###### Simple connection:
            ```yaml
            connections:
              - id: stripe
                type: Stripe
                properties:
                  secretKey:
                    _secret: STRIPE_SECRET_KEY
            ```
            Environment variables:
            ```
            LOWDEFY_SECRET_STRIPE_SECRET_KEY = sk_test_KyvNyie...
            ```

            ###### Using an older API version:
            ```yaml
            connections:
              - id: stripe
                type: Stripe
                properties:
                  secretKey:
                    _secret: STRIPE_SECRET_KEY
                  apiVersion: 2017-12-14
            ```
            Environment variables:
            ```
            LOWDEFY_SECRET_STRIPE_SECRET_KEY = sk_test_KyvNyie...
            ```

            ## Requests

            Request types:
              - StripeRequest

            ### StripeRequest

            The `StripeRequest` request allows calls to all modules supported by the [Stripe API client](https://stripe.com/docs/api?lang=node) by nesting the resource and method calls:
            ```yaml
            resource:
              method:
                - parameter1
                - parameter2
            ```

            #### Properties
            - `{{ apiResource }}: object`: A Stripe API resource, eg. `customers`.
              - `{{ method }}: array | null`: A resource method, eg. `create`. The arguments array will be passed on to the client method.

            The Stripe client exposes all resources as objects, with the API methods being available as function properties on those resource objects.
            In Lowdefy, you may access these properties by nesting them.

            ### Examples

            ###### List the 30 most recent customers
            ```yaml
            requests:
              - id: list_customers
                type: StripeRequest
                connectionId: stripe
                properties:
                  customers:
                    list:
                      limit: 30
            ```

            ###### Create a payment intent
            ```yaml
            requests:
              - id: create_payment_intent
                type: StripeRequest
                connectionId: stripe
                properties:
                  paymentIntents:
                    create:
                      - amount: 2000
                        currency: eur
                        payment_method_types: [ card ]
            ```

            ###### Retrieve a checkout session by ID
            ```yaml
            requests:
              - id: retrieve_checkout_session
                type: StripeRequest
                connectionId: stripe
                properties:
                  checkout:
                    sessions:
                      retrieve:
                        - cs_test_onpT2icY2lrSU0IgDGXEhhcOHcWeJS5BpLcQGMx0uI9TZHLMBdzvWpvx
            ```
