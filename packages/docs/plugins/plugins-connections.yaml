# Copyright 2020-2024 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: plugins-connections
    pageTitle: Connection and Request Plugins
    section: Plugins
    filePath: plugins/plugins-connections.yaml
    content:
      - id: md1
        type: MarkdownWithCode
        properties:
          content: |
            Connections and requests are used to integrate with other services like API's or databases.

            Connections configure the settings to the external service, and often contain parameters like connection strings, urls and secrets like passwords or API keys. Lowdefy does not execute any code for the connection, it is merely a convenient object to hold configuration that is shared by multiple requests.

            Each connection type can include a number of request types. Requests are the functions that the Lowdefy server executes. The response returned by the request function will be serialised into JSON (with additional support for dates and Javascript errors) and used as the response value for the request by the client. If a promise is returned it wil be awaited.

            Request parameters:
            - `connection: object`: The connection `properties` defined by the user in the Lowdefy configuration. Operators are evaluated before the properties are passed to the request.
            - `connectionId: string`: The connectionId used by the request and as set on the request.
            - `pageId: string`: The pageId from which the request was called.
            - `payload: object`: The payload data object passed to the request. Operators are evaluated on the client before the payload is passed to the server request function.
            - `request: object`: The request `properties` defined by the user in the Lowdefy configuration. Operators are evaluated before the properties are passed to the request.
            - `requestId: object`: The requestId of the request.

            #### Schema Validation

            A [JSON Schema](https://json-schema.org/) schema can be used to validate the connection and request properties before they are passed to the request function. The [ajv-errors](https://ajv.js.org/packages/ajv-errors.html) package is used to provide useful error messages if the schema validation fails. Attached the json-schema to the request function with property `schema`, to validate request input before the request function is called.

            #### Examples

            ###### A simplified version of the AxiosHttp request:

            ```js
            import axios from 'axios';
            import { mergeObjects } from '@lowdefy/helpers';

            import schema from '../schema.js';

            async function AxiosHttp({ request, connection }) {
              const config = mergeObjects([connection, request]);
              const res = await axios(config);
              const { status, statusText, headers, method, path, data } = res;
              return { status, statusText, headers, method, path, data };
            }

            AxiosHttp.schema = schema; // Attached json-schema used to validate request input before the request function is called.
            AxiosHttp.meta = {
              checkRead: false,
              checkWrite: false,
            };

            export default AxiosHttp;
            ```
      - _ref:
          path: templates/navigation_buttons.yaml
          vars:
            # previous_page_title: Blocks
            # previous_page_id: plugins-blocks
            previous_page_title: Actions # while blocks doesn't exist
            previous_page_id: plugins-actions
            next_page_title: Operators
            next_page_id: plugins-operators
