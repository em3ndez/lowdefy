# Copyright 2020-2024 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: v3-to-v4
    pageTitle: Version 3 to Version 4
    section: Migration
    filePath: migration/v3-to-v4.yaml
    content:
      - id: md1
        type: MarkdownWithCode
        style:
          maxWidth: 800
        properties:
          content:
            _nunjucks:
              on:
                version:
                  _ref: version.yaml
              template: |
                ## Payload on Requests

                In version 3, the `state`, `global`, `input`, `urlQuery` and `event` data objects were sent with the request. This allowed the use of the [`_state`](/_state), [`_global`](/_global), [`_input`](/_input), [`_url_query`](/_url_query) and [`_event`](/_event) operators inside requests and connections. If the state became too large, this would result in a payload size exceeded error on request calls.

                In version 4, these operators can no longer be used in requests, and request payloads are introduced. Payloads can be used to specify the data that should be sent with the request. The data specified in the payload can be accessed using the `_payload` operator. Operators are evaluated in the payload before it is sent, so operators such as [`_state`](/_state) and [`_global`](_global) can be used in the payload.

                If only the [`_state`](/_state) operator was used, the entire state object can be set as the payload:

                ###### Version 3:

                ```yaml
                id: api_call
                type: AxiosHttp
                connectionId: my_api
                properties:
                  url: /products/new
                  method: post
                  data:
                    name:
                      _state: name
                    product_category:
                      _state: name
                ```

                ###### Version 4:

                ```yaml
                id: api_call
                type: AxiosHttp
                connectionId: my_api
                payload:
                  _state: true
                properties:
                  url: /products/new
                  method: post
                  data:
                    name:
                      _payload: name
                    product_category:
                      _payload: product_category
                ```

                The payload can also be created more explicitly using more than one operator type:

                ###### Version 3:

                ```yaml
                id: api_call
                type: AxiosHttp
                connectionId: my_api
                properties:
                  url: /products/update
                  method: post
                  data:
                    id:
                      _url_query: id
                    name:
                      _state: name
                ```

                ###### Version 4:

                ```yaml
                id: api_call
                type: AxiosHttp
                connectionId: my_api
                payload:
                  id:
                    _url_query: id
                  name:
                    _state: name
                properties:
                  url: /products/new
                  method: post
                  data:
                    id:
                      _payload: id
                    name:
                      _payload: name
                ```

                The `user` data object is still available in requests, and the [`_user`](/_user) operator should be used in the request properties not in they payload as malicious users can modify the data sent in payload.

                ###### Don't do:

                ```yaml
                id: api_call
                type: AxiosHttp
                connectionId: my_api
                payload:
                  # ...
                  created_by:
                    _user: id
                properties:
                  url: /products/new
                  method: post
                  data:
                    # ...
                    created_by:
                      _payload: created_by
                ```

                ###### Do:

                ```yaml
                id: api_call
                type: AxiosHttp
                connectionId: my_api
                payload:
                  # ...
                properties:
                  url: /products/new
                  method: post
                  data:
                    # ...
                    created_by:
                      _user: id
                ```

                > If you see a warning message like `Operator type "_state" was used but is not defined.`, you are using the `_state` operator in a request's properties and should move it to payload.

                ## Icons

                The Ant Design icons used in version 3 have been replaced by [React Icons](https://react-icons.github.io/react-icons/), which has a much larger library of icons to choose from, including the Ant Design icons. To use a React Icon, set the `icon` or `icon.name` property to the React Icon name.

                To convert existing Ant Design icons to React Icons, the icon names should be changed to the new format:

                ###### Version 3:

                ```yaml
                id: save_button
                type: Button
                properties:
                  icon: SaveOutlined
                ```

                ###### Version 4:

                ```yaml
                # Using the same Ant Design icon
                id: save_button
                type: Button
                properties:
                  icon: AiOutlineSave
                ```

                ```yaml
                # Using the Font Awesome icon
                id: save_button
                type: Button
                properties:
                  icon: FaRegSave
                ```

                ## Renames and Minor changes

                The `Message` action has been renamed to [`DisplayMessage`](/DisplayMessage). Change the type name of `Message` actions to [`DisplayMessage`](/DisplayMessage).

                The `onEnter` and `onEnterAsync` events have been removed as their functionality is duplicated by the `onMount` and `onMountAsync` events. Rename all `onEnter` and `onEnterAsync` events to `onMount` and `onMountAsync` respectively.

                Duplicate action ids in the same action chain were allowed in version 3, but are not allowed in version 4. If you get a build error about duplicate action ids, give the actions unique ids.

                The `Notification` action has been removed. Switch to the [`DisplayMessage`](/DisplayMessage) action, or use a [`Notification`](/Notification) block and the `CallMethod` action to open the notification.

                The 404 page is now always a public page.

                The [`Anchor`](/Anchor) block properties schema has changed. The `href` property has been removed and it now takes the same props as the [`Link`](/Link) action.

                The [`_yaml.parse`](/_yaml) operator now takes an object with a `on` property or an array where the first argument is the string to parse, instead of just a string, to allow it to take additional options.

                The `ChromeColorSelector`, `CircleColorSelector`, `CompactColorSelector`, `GithubColorSelector`, `SliderColorSelector`, `SwatchesColorSelector`, and `TwitterColorSelector` have been replaced by the [`ColorSelector`](/ColorSelector) block.

                The `color` properties in blocks like [`MobileMenu`](/MobileMenu), [`PageHeaderMenu`](/PageHeaderMenu), [`PageSiderMenu`](/PageSiderMenu) have been removed. Use Ant Design theme less variables instead.

                The [`_var`](/_var) operator `name` param has been renamed to `key` to be more consistent with other getter operators.

                The `_format` operator has been replaced with the [`_intl`](/_intl) and [`_moment`](/_moment) operator, with some minor schema changes.

                The format of dates in the output of the  [`_json.stringify`](/_json) and [`_yaml.stringify`](/_yaml) operators, as well as in URL query parameters has changed from `_date: {iso_date_string}` to `~d: {iso_date_string}`.

                ## Block Loading States

                The page loading states in version 4 have been improved. In general apps should load a lot faster. Blocks will now be a lot less likely to show a loading state and rather render as normal, and render their children. Input blocks will be disabled while in a loading state. This contributes to users seeing useful content sooner, and to less layout shifts once the app finishes loading.

                In version 3, blocks had a `loading` property to specify the loading skeleton that should be used while the block is in a loading state. This functionality has been replaced by the `skeleton` property. The `loading` property is now used to control the loading state of the block. The block will be in a loading state if an `onInit` or `onMount` event is busy, if a parent block is loading or if the `loading` property evaluates to true. See more about loading [here](/blocks).

                The convert from version 3 to version 4, replace the `loading` property on blocks with the `skeleton` property.

                ###### Version 3:

                ```yaml
                id: paragraph_one
                type: Markdown
                loading:
                  type: SkeletonParagraph
                  properties:
                    lines: 5
                properties:
                  content:
                    _request: get_text.body_text
                ```

                ###### Version 4:

                ```yaml
                id: paragraph_one
                type: Markdown
                skeleton:
                  type: SkeletonParagraph
                  properties:
                    lines: 5
                properties:
                  content:
                    _request: get_text.body_text
                ```

                ```yaml
                # Keep the block in loading while the request is loading
                id: paragraph_one
                type: Markdown
                loading:
                  _eq:
                    - _request: get_text
                    - null
                skeleton:
                  type: SkeletonParagraph
                  properties:
                    lines: 5
                properties:
                  content:
                    _request: get_text.body_text
                ```

                ## Static files

                Static files placed in the `public` folder of your project were always served from the public url path - for example `https://example.com/public/filename.jpeg`. These files are now served from the root path of your app. The example above will now be served from `https://example.com/filename.jpeg`. This allows you to serve files like `robots.txt` and `sitemap.xml` from the root path. Change all references in your config to the new paths.

                If you still want to serve assets under the `/public` path, you can add an addition `public` folder inside the existing `public` folder:

                ```txt
                .
                ├─ public
                │  └─ public
                │     └─ my-logo.jpeg
                └─ lowdefy.yaml
                ```

                ## Authentication Changes

                In version 4, authentication has been reworked to use [NextAuth.js](https://next-auth.js.org), which offers a lot more flexibility and additional features - read more [here](/users-introduction).

                To migrate a version 3 OpenID Connect provider, at least the following needs to be done:
                - The `config.auth` property has moved to the `auth` root level property.
                - The `config.auth.openId` properties have been removed, replace them with configuration for your provider:
                ```yaml
                auth:
                  providers:
                    - id: auth0
                      type: Auth0Provider
                      properties:
                        clientId:
                          _secret: AUTH0_CLIENT_ID
                        clientSecret:
                          _secret: AUTH0_CLIENT_SECRET
                        issuer:
                          _secret: AUTH0_ISSUER
                ```

                - The `NEXTAUTH_SECRET` environment variable needs to be set to a secure secret value (replacing `LOWDEFY_SECRET_JWT_SECRET`).
                - The callback URLs configured with the provider change from `{{ protocol }}{{ host }}/auth/openid-callback` to `{{ protocol }}{{ host }}/api/auth/callback/{{ providerId }}`.
                - The `Login` and `Logout` action params have changed between V3 and V4.

                ## Custom Blocks, Actions and Operators

                Custom blocks, the `JsAction` action and the `_js` operator have been replaced by the new Lowdefy plugin system which is an easier, more powerful and standardized way to extend actions, blocks, connections, operators and the authentication system with custom JavaScript. See the [plugin documentation](/plugins-introduction) for more information on how to use and develop plugins.

                The [AgGrid](https://github.com/lowdefy/blocks-aggrid) custom blocks have been added as default Lowdefy blocks, so these blocks can now be used without any additional configuration.

                ## Context has been removed

                In version 3, the first block on a page needed to be a `context` category block. This was because in version 3 you could have multiple context blocks on the same page, each with it's own separate state.

                This feature was found to be unnecessary, created additional complexity and was difficult to understand, so it was removed.

                The `Context` type block was removed, as it was a `Box` block that also created a context. The `Context` block can be replaced by a `Box`.

                If the `Context` block is no longer necessary it can also be removed:

                ###### Version 3:

                ```yaml
                id: '404'
                type: Context
                style:
                  minHeight: 100vh
                blocks:
                  - id: 404_result
                    type: Result
                    properties:
                      status: 404
                      title: '404'
                      subTitle: Sorry, the page you are visiting does not exist.
                ```

                ###### Version 4:

                ```yaml
                id: '404'
                type: Result
                style:
                  minHeight: 100vh
                properties:
                  status: 404
                  title: '404'
                  subTitle: Sorry, the page you are visiting does not exist.
                ```

                ## Other removed blocks

                In version 4 the `PageHCF`, `PageHCSF`, `PageHSCF`, and `PageSHCF` blocks have been removed. Instead you can now use the `Layout`, `Header`, `Content`, `Sider` and `Footer` blocks. See more about this [here](https://4x.ant.design/components/layout/).

                ###### Layout, Header-Content-Footer example:

                ```yaml
                id: layout
                type: Layout
                style:
                  textAlign: center
                blocks:
                  - id: header
                    type: Header
                    blocks:
                      - id: Title
                        type: Title
                        properties:
                          content: Header
                        style:
                          backgroundColor: red
                  - id: content
                    type: Content
                    blocks:
                      - id: Title
                        type: Title
                        style:
                          backgroundColor: green
                        properties:
                          content: Content
                  - id: footer
                    type: Footer
                    blocks:
                      - id: Title
                        type: Title
                        style:
                          backgroundColor: blue
                        properties:
                          content: Footer
                ```

                ## Server Configuration

                The `LOWDEFY_SERVER_BASE_PATH` environment variable configuration option has been removed. To configure a base path, use the `config.basePath` configuration option.

                ``yaml
                lowdefy: {{ version }}

                config:
                  basePath: /foo
                ```

                The `_build.env` operator can be used to set the base path using an environment variable:
                ```yaml
                lowdefy: {{ version }}

                config:
                  basePath:
                    _build.env: LOWDEFY_BASE_PATH
                ```

                The `LOWDEFY_SERVER_PUBLIC_DIRECTORY` and `LOWDEFY_SERVER_BUILD_DIRECTORY` are no longer supported because configuration is bundled with the server at build time.

                The `LOWDEFY_SERVER_PORT` environment variable has been replaced by the `PORT` environment variable.

                ## _change_case

                The options splitRegex and stripRegex are no longer supported in v4 and the following have been renamed:
                  - paramCase to kebabCase
                  - headerCase to trainCase

                ###### Version 3:

                ```yaml
                _change_case.paramCase:
                  on: example string
                ```

                ###### Version 4:

                ```yaml
                _change_case.kebabCase:
                  on: example string
                ```

                ###### Version 3:

                ```yaml
                _change_case.headerCase:
                  on: example string
                ```

                ###### Version 4:

                ```yaml
                _change_case.trainCase:
                  on: example string
                ```
