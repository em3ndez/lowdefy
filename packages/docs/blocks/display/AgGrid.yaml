# Copyright 2020-2024 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/generic_block.yaml.njk
  vars:
    block_type: AgGrid
    category: display
    pageTitle: AgGrid
    filePath: blocks/display/AgGrid.yaml
    schema: ../plugins/blocks/blocks-aggrid/src/blocks/AgGridAlpine/schema.json
    description_content: |
      This is a Lowdefy blocks wrapper for for [Ag-Grid](https://www.ag-grid.com/), a feature rich javascript grid and table library.
      The implementation of these blocks is a minimal wrapper for the [@ag-grid-community/core](https://www.npmjs.com/package/@ag-grid-community/core) package. This means you write normal Ag-Grid config to create tables.

      Available ag-grid theme specific block types:
      - [`AgGridAlpine`](https://www.ag-grid.com/example?theme=ag-theme-alpine)
      - [`AgGridAlpineDark`](https://www.ag-grid.com/example?theme=ag-theme-alpine-dark)
      - [`AgGridBalham`](https://www.ag-grid.com/example?theme=ag-theme-balham)
      - [`AgGridBalhamDark`](https://www.ag-grid.com/example?theme=ag-theme-balham-dark)
      - [`AgGridMaterial`](https://www.ag-grid.com/example?theme=ag-theme-material)

      See the [Ag-Grid docs](https://www.ag-grid.com/documentation/react/getting-started/) for the table settings API.
      Here are a couple of basic properties.

      ### Properties
      - `height: number`: Specify table height explicitly, in pixel.
      - `rowData: array`: The list of data to display on the table.
      - `defaultColDef: columnProperties`: Column properties which get applied to all columns. See all [column properties](https://www.ag-grid.com/javascript-data-grid/column-properties/)
      - `columnDefs: columnProperties[]`: A list of properties for each column.
        - `field: string`: The field of the row object to get the cell's data from. Deep references into a row object is supported via dot notation, i.e 'address.firstLine'.
        - `headerName: string`: The name to render in the column header. If not specified and field is specified, the field name will be used as the header name.
        - `filter: boolean`: Filter component to use for this column. Set to true to use the default filter.
        - `sortable: boolean`: Set to true to allow sorting on this column. Default: false.
        - `resizable: boolean`: Set to true to allow this column should be resized. Default: false.
        - `width: number`: Initial width in pixels for the cell.
        - `cellStyle: cssObject`: An object of css values returning an object of css values for a particular cell.
        - `cellRenderer: function`: Provide your own cell Renderer function (using the `_function` operator) for this column's cells.
        - `valueFormatter: function`: A function (using the `_function` operator) or expression to format a value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering.
      ### Events
      - `onCellClick`: Trigger event when a cell is clicked and pass the following to `_event`:
        - `cell: object`: Cell data object.
        - `colId: string`: Column id of the clicked cell.
        - `index: number`: Data index of the clicked row as per provided data array.
        - `row: object`: Row data object.
        - `rowIndex: number`: List index of the clicked row, changes with data sorting or filtering.
        - `selected: object[]`: List of selected row objects.
      - `onFilterChanged`: Trigger event when the filter changes and pass the following to `_event`:
        - `rows: object[]`: List of row objects matched by the filter.
        - `filter: object`: An object of objects where each key is the row being filtered.
      - `onRowClick`: Trigger event when a row is clicked and pass the following to `_event`:
        - `index: number`: Data index of the clicked row as per provided data array.
        - `row: object`: Row data object.
        - `rowIndex: number`: List index of the clicked row, changes with data sorting or filtering.
        - `selected: object[]`: List of selected row objects.
      - `onRowSelected`: Trigger event when a row is selected and pass the following to `_event`:
        - `index: number`: Data index of the clicked row as per provided data array.
        - `row: object`: Row data object.
        - `rowIndex: number`: List index of the clicked row, changes with data sorting or filtering.
        - `selected: object[]`: List of selected row objects.
      - `onSelectionChanged`: Triggered when the selected rows are changed and pass the following to `_event`:
        - `selected: object[]`: List of selected row objects.
      - `onSortChanged`: Trigger event when the sort changes and pass the following to `_event`:
        - `rows: object[]`: List of row objects matched by the filter.
        - `sort: object[]`: List of rows which are being sorted.
      ### Methods
      - `exportDataAsCsv`: When called, table data will be downloaded in csv format.
      - `sizeColumnsToFit`: When called, size table column widths to fit all columns to table width.
      - `autoSize`: When called, auto size columns. The following can be passed as the first argument of `args`.
            - `skipHeader: boolean`: Do not consider header content width when auto-sizing columns.
            - `columnIds: string[]`: List of `colId`s for which to calculate auto-size when called.
      - `setFilterModel`: When called, apply filter model to table. See https://www.ag-grid.com/javascript-data-grid/filter-api/ for model details.
      - `setQuickFilter`: When called, pass a quick filter text into the grid for filtering. See https://www.ag-grid.com/javascript-data-grid/filter-quick/ for details.
    examples:
      - title: Basic example
        block:
          id: my_table
          type: AgGridAlpine
          properties:
            rowData:
              - title: One
                year: 2010
                viewerReviews: 30
              - title: Two
                year: 2011
                viewerReviews: 20
            defaultColDef:
              sortable: true
              resizable: true
              filter: true
            columnDefs:
              - headerName: Title
                field: title
                width: 350
              - headerName: Year
                field: year
                width: 100
              - headerName: Viewer Reviews
                field: viewerReviews
                width: 160
      - title: 'Format dates with cellRenderer'
        block:
          id: my_table
          type: AgGridAlpine
          properties:
            rowData:
              - title: One
                year: 2010
                date:
                  _date: 2010-03-14
              - title: Two
                year: 2011
                date:
                  _date: 2011-04-01
            defaultColDef:
              sortable: true
              resizable: true
              filter: true
            columnDefs:
              - headerName: Title
                field: title
                width: 200
              - headerName: Year
                field: year
                width: 100
              - headerName: Date
                field: date
                width: 160
                cellRenderer:
                  _function:
                    __moment.format:
                      on:
                        __args: 0.data.date
                      format: 'D MMM YYYY'
      - title: 'Format currency with valueFormatter'
        block:
          id: my_table
          type: AgGridAlpine
          properties:
            rowData:
              - title: One
                year: 2010
                total: 300.21
              - title: Two
                year: 2011
                total: 1230.9495
            defaultColDef:
              sortable: true
              resizable: true
              filter: true
            columnDefs:
              - headerName: Title
                field: title
                width: 200
              - headerName: Year
                field: year
                width: 100
              - headerName: Total
                field: total
                width: 160
                valueFormatter:
                  _function:
                    __intl.numberFormat:
                      on:
                        __args: 0.value
                      options:
                        style: 'currency'
                        currency: 'EUR'
      - title: 'onRowClick'
        block:
          id: my_table
          type: AgGridAlpine
          properties:
            rowData:
              - title: One
                year: 2010
                viewerReviews: 30
              - title: Two
                year: 2011
                viewerReviews: 20
            defaultColDef:
              sortable: true
              resizable: true
              filter: true
            columnDefs:
              - headerName: Title
                field: title
                width: 350
              - headerName: Year
                field: year
                width: 100
              - headerName: Viewer Reviews
                field: viewerReviews
                width: 160
          events:
            onRowClick:
              - id: set_selected
                type: SetState
                params:
                  selected_row: # Update 'selected' in state with the event data.
                    _event: true
        extra:
          id: selection
          type: MarkdownWithCode
          properties:
            content:
              _nunjucks:
                template: |
                  ```yaml
                    {{ selection | safe | indent(2) }}
                  ```
                on:
                  selection:
                    _yaml.stringify:
                      - _state: selected_row
      - title: 'onCellClick'
        block:
          id: my_table
          type: AgGridAlpine
          properties:
            rowData:
              - title: One
                year: 2010
                viewerReviews: 30
              - title: Two
                year: 2011
                viewerReviews: 20
            defaultColDef:
              sortable: true
              resizable: true
              filter: true
            columnDefs:
              - headerName: Title
                field: title
                width: 350
              - headerName: Year
                field: year
                width: 100
              - headerName: Viewer Reviews
                field: viewerReviews
                width: 160
          events:
            onCellClick:
              - id: set_selected
                type: SetState
                params:
                  selected_cell: # Update 'selected_cell' in state with the event cell data.
                    _event: true
        extra:
          id: selection
          type: MarkdownWithCode
          properties:
            content:
              _nunjucks:
                template: |
                  ```yaml
                    {{ selection | safe | indent(2) }}
                  ```
                on:
                  selection:
                    _yaml.stringify:
                      - _state: selected_cell
      - title: 'Using rowId to preserve selection'
        description: |
          This example shows a table switching between two sets of data. Some rows are common between the data sets and the data rows have a unique identifier field `uniqueId` which we can use as the `rowId` field to ensure selection is preserved when switching the data sets. If no `rowId` is set and the row data does not contain an `id` or `_id` field, and the row data JSON stringified is used as the row id. This still works but may slightly impact performance.
        block:
          id: my_table
          type: AgGridAlpine
          properties:
            height: 200
            rowId: uniqueId
            rowData:
              _state: table_data
            columnDefs:
              - headerName: Unique ID
                field: uniqueId
                checkboxSelection: true
              - headerName: Title
                field: title
              - headerName: Year
                field: year
        extra:
          id: table_data_box
          type: Box
          events:
            onMount:
              - id: init_value
                type: SetState
                params:
                  table_data:
                    - title: One
                      year: 2010
                      uniqueId: 2010-1
                    - title: Two
                      year: 2011
                      uniqueId: 2011-1
          blocks:
            - id: table_data
              type: ButtonSelector
              properties:
                label:
                  disabled: true
                options:
                  - label: Data Set 1
                    value:
                      - title: One
                        year: 2010
                        uniqueId: 2010-1
                      - title: Two
                        year: 2011
                        uniqueId: 2011-1
                  - label: Data Set 2
                    value:
                      - title: Three
                        year: 2011
                        uniqueId: 2011-2
                      - title: One
                        year: 2010
                        uniqueId: 2010-1
            - id: table_data_display
              type: MarkdownWithCode
              properties:
                content:
                  _nunjucks:
                    template: |
                      ```yaml
                        {{ table_data | safe | indent(2) }}
                      ```
                    on:
                      table_data:
                        _yaml.stringify:
                          - _state: table_data
      - title: 'Server-side filter and sort'
        description: |
          This example shows how you can filter your table data server-side by making use of AgGrid's built in filter and sort functionality and calling the `onFilterChanged` and `onSortChanged` events. In this example we use dummy data, but you would pass in `_request: table_request` to `properties.rowData`.
        block:
          id: my_table
          type: AgGridAlpine
          properties:
            rowData:
              ## We use dummy data for demo purposes. We would usually read the table data from the request
              # _request: table_request
              - title: One
                year: 2010
                viewerReviews: 30
              - title: Two
                year: 2011
                viewerReviews: 20
            defaultColDef:
              sortable: true
              resizable: true
              filter: true
              ## Simplify the table filter
              filterParams:
                suppressAndOrCondition: true
                filterOptions:
                  - contains
            columnDefs:
              - headerName: Title
                field: title
                width: 350
              - headerName: Year
                field: year
                width: 100
              - headerName: Viewer Reviews
                field: viewerReviews
                width: 160
          events:
            onSortChanged:
              - id: set_table_sort
                type: SetState
                params:
                  table.sort:
                    _event: sort
              - id: refetch
                type: Request
                messages:
                  error: false
                params: table_request
            onFilterChanged:
              - id: set_table_filter
                type: SetState
                params:
                  table.filter:
                    _event: filter
              - id: refetch
                type: Request
                messages:
                  error: false
                params: table_request

        extra:
          id: example_config
          type: MarkdownWithCode
          properties:
            content:
              _nunjucks:
                template: |
                  onSortChanged response (only `sort`, not `rows`):
                  ```yaml
                  {{ sort | safe }}
                  ```
                  onFilterChanged response filter (only `filter`, not `rows`):
                  ```yaml
                  {{ filter | safe }}
                  ```
                  Table request:
                  ```yaml
                  id: table_request
                  type: MongoDBAggregation
                  connectionId: table_connection
                  payload:
                    table:
                      _state: table
                  properties:
                    pipeline:
                      - $match:
                          $expr:
                            $and:
                              _if:
                                test:
                                  _eq:
                                    - _if_none:
                                        - _payload: table.filter
                                        - null
                                    - null
                                then:
                                  - true ## If a filter is not applied to the table.
                                else:
                                  _array.map:
                                    - _object.entries:
                                        _payload: table.filter
                                    - _function:
                                        $regexMatch:
                                          input:
                                            __string.concat:
                                              - '$'
                                              - __args: '0.0'
                                          regex:
                                            __args: '0.1.filter'
                                          options: 'i'
                      - $sort:
                          _if:
                            test:
                              _eq:
                                - _array.length:
                                    _if_none:
                                      - _payload: table.sort
                                      - []
                                - 0
                            then:
                              year: 1 ## If a sort is not applied to the table, default to this.
                            else:
                              _object.fromEntries:
                                _array.map:
                                  - _array.sort:
                                      - _if_none:
                                          - _payload: table.sort
                                          - []
                                      - _function:
                                          __subtract:
                                            - __args: 0.sortIndex
                                            - __args: 1.sortIndex
                                  - _function:
                                      - __args: 0.colId
                                      - __if:
                                          test:
                                            __eq:
                                              - __args: 0.sort
                                              - 'asc'
                                          then: 1
                                          else: -1
                  ```

                on:
                  sort:
                    _yaml.stringify:
                      - _state: table.sort
                  filter:
                    _yaml.stringify:
                      - _state: table.filter
