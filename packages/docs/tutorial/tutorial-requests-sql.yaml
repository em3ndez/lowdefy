# Copyright 2020-2024 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: tutorial-requests-sql
    pageTitle: 6. Saving data to SQL
    section: Tutorial
    filePath: tutorial/tutorial-requests-sql.yaml
    content:
      - id: body_sqlite
        type: MarkdownWithCode
        properties:
          content: |
            If you have been following along, you can continue with your current config. Else, you can find the config from the previous section [here](https://github.com/lowdefy/lowdefy-example-tutorial/tree/main/05-requests-api).

            We will now add a `SQLite` [connection and request](/connections-and-requests) to our app to save user tickets to the SQLite database file.

            ## Configuring the SQLite Connection and Request

            We will be saving the data from our form in a SQLite database, using the [`Knex`](/SQLite) connection. To do this, we will first need to set up an SQLite database as described in the following steps:

            #### 6.1. Setting up the SQLite database

            We will make use of an SQLite database with a table called `tickets`, that has the following columns:

            - ticket_title
            - ticket_type
            - ticket_description
            - product
            - purchase_in_last_month
            - created_date

      - id: table_download
        type: DangerousMarkdown
        properties:
          content: |
            The database used in this tutorial can be downloaded <a href="/tutorial/tutorial_db.sqlite" download>here</a>.

      - id: body_sqlite_steps
        type: MarkdownWithCode
        properties:
          content:
            _nunjucks:
              on:
                version:
                  _ref: version.yaml
              template: |
                Alternatively, install [SQLite](https://www.sqlite.org/) on your computer and use the following to create the needed table:

                ```
                CREATE TABLE tickets (
                  ticket_title varchar(100),
                  ticket_type varchar(50),
                  ticket_description varchar(200),
                  product varchar(100),
                  purchase_in_last_month real,
                  created_date real
                );
                ```

                #### 6.2. Setting app environment variables

                Create a file called `.env` in your project directory with the following content:

                ##### `.env`
                ```
                LOWDEFY_SECRET_SQLITE_FILENAME= __ABSOLUTE_PATH_TO_SQLITE_DB_FILE__
                ```

                #### 5.2.3. Setting the connection environment variable secrets

                In your `lowdefy.yaml` file, add the following:

                ##### `lowdefy.yaml`

                ```yaml
                name: lowdefy-project-template
                version: {{ version }}

                connections:
                  # ...
                ################ -------- Copy from here -------- ################
                    - id: knex
                      type: Knex
                      properties:
                        client: sqlite
                        connection:
                          filename:
                            _secret: SQLITE_FILENAME
                ################ ------- Copy to here ----------- ################

                menus:
                  # ...
                ```

                #### 6.3. Creating a save data request

                In your `new-ticket.yaml` file, add the following request:

                ##### `pages/new-ticket.yaml`

                ```yaml
                id: new-ticket
                type: PageHeaderMenu
                requests:
                  # ...
                ################ -------- Copy from here -------- ################
                  - id: save_new_ticket
                    type: KnexRaw
                    connectionId: knex
                    payload:
                      _state: true
                    properties:
                      query: |
                        INSERT INTO tickets (
                        ticket_title,
                        ticket_type,
                        ticket_description,
                        product,
                        purchase_in_last_month,
                        created_date)
                        VALUES(
                        :ticket_title,
                        :ticket_type,
                        :ticket_description,
                        :product,
                        :purchase_in_last_month,
                        :created_date)
                      parameters:
                        ticket_title:
                          _payload: ticket_title
                        ticket_type:
                          _payload: ticket_type
                        ticket_description:
                          _payload: ticket_description
                        product:
                          _payload: product
                        purchase_in_last_month:
                          _payload: purchase_in_last_month
                        created_date:
                          _date: now
                ################ ------- Copy to here ----------- ################

                properties:
                  title: New ticket # The title in the browser tab.
                layout:
                  contentJustify: center # Center the contents of the page
                blocks:
                  # ...
                ```

                #### 6.4. Triggering the save data request

                In your `new-ticket.yaml` file, add the following action to the submit button:

                ##### `pages/new-ticket.yaml`

                ```yaml
                id: new-ticket
                # ...
                blocks:
                  - id: content_card
                    # ...
                    blocks:
                      - id: page_heading
                        # ...
                        # ...
                        # ...
                      - id: submit_button
                        type: Button
                        #...
                        events:
                          onClick:
                            - id: validate
                              type: Validate
                            ################ -------- Copy from here -------- ################
                            - id: save_new_ticket # Make a request to the SQLite database
                              type: Request
                              params: save_new_ticket
                            - id: reset # Reset the form once data has been submitted
                              type: Reset
                            ################ ------- Copy to here ----------- ################
                ```

                If you click the submit button, your form data should be added into the tickets table.

                ### What happened

                We set up the table and column names we will be using in our SQLite database. We need to do this to use the `SQLite` connection.

                We defined the `Knex` connection, with the SQLite client.

                We also defined a `KnexRaw` request, to save the data to our SQLite database, and called that request when clicking the submit button. This was done by making use of the `onCLick` event on the button to execute the [`Request`](/Request) action to make the API call.

                > You can find the final configuration files for this section [here](https://github.com/lowdefy/lowdefy-example-tutorial/tree/main/06-requests-sql).

                ### Up next

                Next, we will add a new page to display all open tickets an a table.

      - _ref:
          path: templates/navigation_buttons.yaml
          vars:
            previous_page_title: API / HTTP Requests
            previous_page_id: tutorial-requests-api
            next_page_title: Display data
            next_page_id: tutorial-display-data-page
