# Copyright 2020-2024 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: tutorial-display-data-page
    pageTitle: 7. Display ticket data
    section: Tutorial
    filePath: tutorial/tutorial-display-data-page.yaml
    content:
      - id: add_page
        type: MarkdownWithCode
        properties:
          content: |
            If you have been following along, you can continue with your current config. Else, you can find the config from the previous section [here](https://github.com/lowdefy/lowdefy-example-tutorial/tree/main/06-requests-sql).

            In this section we will add a page with a table to view the tickets that have been saved to our database.

            We will make use of the concepts shown throughout the previous steps of this tutorial. If you would like to skip this, the final config can be found [here](https://github.com/lowdefy/lowdefy-example-tutorial/tree/main/07-display-data) and you can move on to [Next Steps](/tutorial-next-steps).

            #### 7.1. Create `view-tickets.yaml`

            Create a new YAML file in the project directory (the same directory as the `lowdefy.yaml` file) called `view-tickets.yaml`.

            In this file we will add an `AgGridBalham` table block, using [Ag-Grid](https://www.ag-grid.com/), that will be used to display the tickets that are currently in our SQLite table.

            We shall start with the basic page structure, as follows:

            ```yaml
            id: view-tickets
            type: PageHeaderMenu

            properties:
              title: View tickets # The title in the browser tab.
            layout:
              contentJustify: center # Center the contents of the page.
            blocks:
              - id: content_card
                type: Card
                layout:
                  size: 1000 # Set the size of the card so it does not fill the full screen.
                  contentGutter: 28 # Make a 28px gap between all blocks in this card.
                blocks:
                  - id: page_heading
                    type: Title
                    properties:
                      content: View Tickets # Change the title on the page.
                      level: 3 # Make the title a little smaller (an html `<h3>`).
            ```

            #### 7.2. Add request to `view-tickets.yaml`

            Next we shall add a request to fetch the tickets currently in the tickets table in the SQLite database. To do this, we shall create a `fetch_tickets` request and call it when the page is mounted.

            ```yaml
            id: view-tickets
            type: PageHeaderMenu

            ################ -------- Copy from here -------- ################
            requests:
              - id: fetch_tickets
                type: KnexRaw
                connectionId: knex
                properties:
                  query: SELECT * FROM "tickets"

            events:
              onMount:
                - id: fetch_tickets
                  type: Request
                  params: fetch_tickets
            ################ -------- Copy to here -------- ################

            properties:
              title: View tickets # The title in the browser tab.
            #...
            ```

            ### 7.3. Add an `AgGridBalham` block

            We will add an `AgGridBalham` table block to our page to display the tickets that have been saved in the tickets table. We want to display five columns in our table; `ticket_title`, `created_date`, `ticket_type`, `product` and `ticket_description`.

            The `rowData` used for our table will be the result from our `fetch_tickets` request and is accessed by making use of the [_request](/_request) operator.

            In order to display the `created_date` in a more compact format, we will make use of the [_nunjucks](/_nunjucks) operator.

            Add the following config to the `view-tickets.yaml` filename:

            ```yaml
            #...

            blocks:
              - id: page_heading
                type: Title
                properties:
                  content: View Tickets # Change the title on the page.
                  level: 3 # Make the title a little smaller (an html `<h3>`).

              ################ -------- Copy from here -------- ################
              - id: view_tickets_table
                type: AgGridBalham
                properties:
                  enableCellTextSelection: true
                  pagination: true
                  rowData:
                    _request: fetch_tickets
                  defaultColDef:
                    sortable: true
                    resizable: true
                    filter: true
                  columnDefs:
                    - headerName: Title
                      field: ticket_title
                      width: 200
                      filter: false
                    - headerName: Date Created
                      field: created_date
                      width: 140
                      cellRenderer:
                        _function:
                          __nunjucks:
                            template: |
                              {{ created_date | date('DD MMM YYYY') }}
                            on:
                              __args: 0.data
                    - headerName: Ticket Type
                      field: ticket_type
                      width: 150
                      filter: false
                    - headerName: Product
                      field: product
                      width: 200
                      filter: false
                    - headerName: Ticket Description
                      field: ticket_description
                      width: 250
                      filter: false
                ################ -------- Copy to here -------- ################
              ```

            #### 7.4. Update `lowdefy.yaml`

            Last step is to add the page to our app. In order to do this, we need to update the `lowdefy.yaml`.

            Change the `lowdefy.yaml` to include `view-tickets.yaml` in the list of pages and the list of menu items:

            ```lowdefy.yaml
            #...
            menus:
              - id: default
                links:
                  - id: welcome
                    type: MenuLink
                    properties:
                      icon: AiOutlineHome
                      title: Home
                    pageId: welcome
                  - id: new-ticket
                    type: MenuLink
                    properties:
                      icon: AiOutlineAlert
                      title: New ticket
                    pageId: new-ticket
                  ################ -------- Copy from here -------- ################
                  - id: view-tickets
                    type: MenuLink
                    properties:
                      icon: AiOutlineDatabase
                      title: View tickets
                    pageId: view-tickets
                  ############### -------- Copy to here ---------- ################

            pages:
              - _ref: new-ticket.yaml
              ################ -------- Copy from here -------- ################
              - _ref: view-tickets.yaml
              ################ -------- Copy to here ---------- ################
              - id: welcome
                type: PageHeaderMenu
                properties:
                  title: Welcome
                # ...
            ```

            ### What happened

            We added a new page in order to view the tickets saved in our database.

            We defined a `KnexRaw` request, to read the ticket data from our SQLite database, and called that request when the page was mounted.

            The data from this request was then displayed in an `AgGridBalham` table block, which we added to the new page.

            Lastly, we linked this new page to our app.

      - _ref:
          path: templates/navigation_buttons.yaml
          vars:
            previous_page_title: Requests
            previous_page_id: tutorial-requests
            next_page_title: Next Steps
            next_page_id: tutorial-next-steps
